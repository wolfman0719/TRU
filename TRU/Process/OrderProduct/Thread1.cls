/// This class is generated by the TRU.Process.OrderProduct BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class TRU.Process.OrderProduct.Thread1 Extends Ens.BP.Thread [ ClassType = persistent, CompileAfter = TRU.Process.OrderProduct, GeneratedBy = Ens.BPL.Compiler.CLS, ProcedureBlock ]
{

Method S1(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Order=request
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.ShippingMethod=request.ShipBy
 If $$$ISERR(status) Quit
 #; --- Begin Call Notify CRM ---
 #; --- Begin Request ---
 Set callrequest=##class(TRU.Msg.CustomerVisit).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Name=request.Name
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","CRM System",callrequest,"Notify CRM",1,0,"Notify CRM",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Notify CRM ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Notify CRM") Do ..%PendingResponses.SetAt("","Notify CRM")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
}

Method S10(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.Message="Out of Stock"
 If $$$ISERR(status) Quit
 Set ..%NextState="S6"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
}

Method S11(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
}

Method S12(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Approve Discount ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.Workflow.TaskRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.%Subject="値引きの承認"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Actions="承認,承認不可"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%UserName="_SYSTEM"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%FormFields="Customer,Discount,TotalSale"
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(request.Name,"Customer")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(context.Discount,"Discount")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(response.TotalPrice,"TotalSale")
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Sales Management",callrequest,"Approve Discount",1,0,"Approve Discount",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Approve Discount ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Approve Discount") Do ..%PendingResponses.SetAt("","Approve Discount")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S14"
 } else {
    Set ..%NextState="S13",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
}

Method S13(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S14"
 } else {
    Set ..%NextState="S13",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
}

Method S14(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
}

Method S2(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
}

Method S3(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=##class(Ens.Rule.RuleDefinition).EvaluateRulesEx("TRU.Process.OrderProduct.DetermineDiscount",,context,"Discount",.ruleReturn,.ruleReason,,process.RuleLogging)  Quit:$$$ISERR(status)
 Set context.Discount = ruleReturn
 #; --- Begin Call Place Order ---
 #; --- Begin Request ---
 Set callrequest=##class(TRU.Msg.ProductOrder).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Product=request.Product
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Quantity=request.Quantity
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Discount=context.Discount
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Name=request.Name
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.City=request.City
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","Inventory System",callrequest,"Place Order",1,0,"Place Order",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Place Order ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Place Order") Do ..%PendingResponses.SetAt("","Place Order")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
}

Method S4(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
}

Method S5(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (context.OrderPlaced) {
 Set ..%NextState="S7"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
}

Method S6(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do process.Reply(response)
 If (context.Discount>10) {
 Set ..%NextState="S12"
 } else {
 Set ..%NextState="S11"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
}

Method S7(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=##class(Ens.Rule.RuleDefinition).EvaluateRulesEx("TRU.Process.OrderProduct.CalculateShipping",,context,"Calculate Shipping",.ruleReturn,.ruleReason,,process.RuleLogging)  Quit:$$$ISERR(status)
 Set context.Shipping = ruleReturn
 #; --- Begin Call Shipping  ---
 #; --- Begin Request ---
 Set callrequest=##class(TRU.Msg.ShippingRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.OrderNumber=context.OrderNumber
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.ShippingMethod=request.ShipBy
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","Shipping System",callrequest,"Shipping ",1,0,"Shipping ",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Shipping  ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Shipping ") Do ..%PendingResponses.SetAt("","Shipping ")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
}

Method S8(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
}

Method S9(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.Ordered=1
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.OrderNumber=context.OrderNumber
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.Message="Your order has been shipped."
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.Name=request.Name
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.City=request.City
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.UnitPrice=request.Product.UnitPrice
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.Discount=context.Discount
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.Shipping=context.Shipping
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.Product=request.Product.Name
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.ShippingMethod=context.ShippingMethod
 If $$$ISERR(status) Quit
 Set status=$$$OK,response.Quantity=request.Quantity
 If $$$ISERR(status) Quit
 Set ..%NextState="S6"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
}

Storage Default
{
<Type>%Storage.Persistent</Type>
}

}
