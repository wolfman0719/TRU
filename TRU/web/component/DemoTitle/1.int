ROUTINE TRU.web.component.DemoTitle.1 [Type=INT,Generated]
 ;TRU.web.component.DemoTitle.1
 ;Generated for class TRU.web.component.DemoTitle.  Do NOT edit. 06/13/2021 08:35:41PM
 ;;75376E43;TRU.web.component.DemoTitle
 ;
%Construct(initvalue) public {
	Set i%%includeFiles=..#INCLUDEFILES,i%category=$get(^IRIS.Msg("TRUDEMO",$s($mvv(58)="":"en",1:$mvv(58)),"1096414540"),"Zen Demonstration"),i%dragEnabled=0,i%dropEnabled=0,i%dynamic=0,i%enclosingClass=..#DEFAULTENCLOSINGCLASS
	Set i%height=..#DEFAULTHEIGHT,i%hidden=..#DEFAULTHIDDEN,i%hintClass=..#DEFAULTHINTCLASS,i%labelClass=..#DEFAULTLABELCLASS,i%labelDisabledClass=..#DEFAULTLABELDISABLEDCLASS
	Set i%overlayMode=0,i%renderFlag=0,i%showLabel=1,i%visible=..#DEFAULTVISIBLE,i%width=..#DEFAULTWIDTH
	Quit ..%OnNew(.initvalue) }
%DrawClassDefinition() public {
 Write !
 Write "self._zenClassIdx['DemoTitle'] = 'TRU_web_component_DemoTitle';",!
 Write "self.TRU_web_component_DemoTitle = function(index,id) {",!
 Write $C(9),"if (index>=0) {TRU_web_component_DemoTitle__init(this,index,id);}",!
 Write "}",!
 Write !
 Write "self.TRU_web_component_DemoTitle__init = function(o,index,id) {",!
 Write $C(9),"('undefined' == typeof _ZEN_Component_component__init) ?"
 Write "zenMaster._ZEN_Component_component__init(o,index,id)"
 Write ":"
 Write "_ZEN_Component_component__init(o,index,id);",!
 Write $C(9),"o.category = '"_$ZCVT($get(^IRIS.Msg("TRUDEMO",$s($mvv(58)="":"en",1:$mvv(58)),"1096414540"),"Zen Demonstration"),"O","JS")_"';",!
 Write $C(9),"o.title = '"_$ZCVT("","O","JS")_"';",!
 Write "}",!
 Set tSC=..%DrawJSSerialize()
 Quit:('tSC) tSC
 Set tSC=..%DrawJSGetSettings()
 Quit:('tSC) tSC
 Do JSSvrMethod(0,"","ReallyRefreshContents","","")
 Write "self.TRU_web_component_DemoTitle__Loader = function() {",!
 Set tCls = "TRU_web_component_DemoTitle"
 Write $C(9),"zenLoadClass('_ZEN_Component_component');",!
 Write $C(9),tCls,".prototype = zenCreate('_ZEN_Component_component',-1);",!
 Write $C(9),"var p = ",tCls,".prototype;",!
 Write $C(9),"if (null==p) {return;}",!
 Write $C(9),"p.constructor = ",tCls,";",!
 Write $C(9),"p.superClass = ('undefined' == typeof _ZEN_Component_component) ? zenMaster._ZEN_Component_component.prototype:_ZEN_Component_component.prototype;",!
 Write $C(9),"p.__ZENcomponent = true;",!
 Write $C(9),"p._serverClass = '"_$ZCVT("TRU.web.component.DemoTitle","O","JS")_"';",!
 Write $C(9),"p._type = '"_"DemoTitle"_"';",!
 Write $C(9),"p.serialize = ",tCls,"_serialize;",!
 Write $C(9),"p.getSettings = ",tCls,"_getSettings;",!
 Write $C(9),"p.ReallyRefreshContents = ",tCls,"_ReallyRefreshContents;",!
 Write "}",!
 Quit 1
JSClientMethod(method,args)
 Write !,"self.","TRU_web_component_DemoTitle","_",method," = function(",args,") {",!
 For line=1:1:$s($d(^oddCOM("TRU.web.component.DemoTitle","m",method,30))#2:^(30),$d(^oddCOM($g(^(2),"TRU.web.component.DemoTitle"),"m",method,30))#2:^(30),1:$s($d(^oddDEF($g(^oddCOM("TRU.web.component.DemoTitle","m",method,2),"TRU.web.component.DemoTitle"),"m",method,30))#2:^(30),1:"")) {
  If +$G(%zenStripJS) {
   Set tLine = $ZSTRIP($s($d(^oddCOM("TRU.web.component.DemoTitle","m",method,30,line))#2:^(line),$d(^oddCOM($g(^oddCOM("TRU.web.component.DemoTitle","m",method,2),"TRU.web.component.DemoTitle"),"m",method,30,line))#2:^(line),1:$g(^oddDEF($g(^oddCOM("TRU.web.component.DemoTitle","m",method,2),"TRU.web.component.DemoTitle"),"m",method,30,line))),"<>W")
   If (tLine["&") {
    Set tLine = $Replace(tLine,"&nbsp;","&#160;")
    Set tLine = $Replace(tLine,"&raquo;","&#187;")
    Set tLine = $Replace(tLine,"&laquo;","&#171;")
   }
   Write:(($L(tLine)>0)&&($E(tLine,1,2)'="//")) tLine,!
  } Else {
   Write $s($d(^oddCOM("TRU.web.component.DemoTitle","m",method,30,line))#2:^(line),$d(^oddCOM($g(^oddCOM("TRU.web.component.DemoTitle","m",method,2),"TRU.web.component.DemoTitle"),"m",method,30,line))#2:^(line),1:$g(^oddDEF($g(^oddCOM("TRU.web.component.DemoTitle","m",method,2),"TRU.web.component.DemoTitle"),"m",method,30,line))),!
  }
 }
 Write "}",!
 Quit
JSSvrMethod(cm,retType,method,args,spec)
 Write !,"self.","TRU_web_component_DemoTitle","_",method," = function(",args,") {",!
 Write $C(9),$S(retType="":"",1:"return "),$S(cm:"zenClassMethod",1:"zenInstanceMethod"),"(this,'",method,"','",spec,"','",retType,"',arguments);",!
 Write "}",!
 Quit }
%DrawHTML() public {
	Set tCategory = ..category
	Set tInstance = $P($ZU(86),"*",2)
	Write "<table class=""demoTitle"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">",!
	Write "		<tr>",!
	Write "		<td align=""left"" width=""40px""><img width=""185px"" height=""60px"" src=""images/zentitle.jpg""/></td>",!
	Write "		<td align=""left"" width=""90%"" style=""padding-left:20px;"">",!
	Write "		<div style=""font-size: 0.6em;"">"_($ZCVT(tCategory,"O","HTML"))_"</div>",!
	Write "		<div>"_($ZCVT(..title,"O","HTML"))_"</div></td>",!
	Write "		<td style=""text-align: right; vertical-align: middle;"">",!
	Write "		<table border=""0"" style=""font-size: 0.6em;"">",!
	Write "		<tr><td align=""right"">"_($get(^IRIS.Msg("TRUDEMO",$s($mvv(58)="":"en",1:$mvv(58)),"765557111"),"User"))_":</td><td align=""left""><b>"_($UserName)_"</b>&nbsp;</td></tr>",!
	Write "		<tr><td align=""right"">"_($get(^IRIS.Msg("TRUDEMO",$s($mvv(58)="":"en",1:$mvv(58)),"1572982976"),"Server"))_":</td><td align=""left""><b>"_(tInstance)_"</b>&nbsp;</td></tr>",!
	Write "		</table>",!
	Write "		</td></tr></table>",!  }
%DrawJSGetSettings() public {
 Write "function TRU_web_component_DemoTitle_getSettings(s)",!
 Write "{",!
 Write $C(9),"s['name'] = 'string';",!
 Write $C(9),"s['category'] = 'caption';",!
 Write $C(9),"s['title'] = 'caption';",!
 Write $C(9),"this.invokeSuper('getSettings',arguments);",!
 Write "}",!
 Quit 1 }
%DrawJSSerialize() public {
 Write "function TRU_web_component_DemoTitle_serialize(set,s)",!
 Write "{",!
 Write $C(9)
 Write "var o = this;"
 Write "s[0]='"_$ZCVT(..%GetClassCRC(),"O","JS")_"';"
 Write "s[1]=o.index;"
 Write "s[2]=o.id;"
 Write "s[3]=o.name;"
 Write "s[4]=set.addObject(o.parent,'parent');"
 Write "s[5]=set.addObject(o.composite,'composite');"
 Write "s[6]=o.align;"
 Write "s[7]=o.aux;"
 Write "s[8]=o.category;"
 Write "s[9]=o.containerStyle;"
 Write "s[10]=(o.dragEnabled?1:0);"
 Write "s[11]=(o.dropEnabled?1:0);"
 Write "s[12]=(o.dynamic?1:0);"
 Write "s[13]=o.enclosingClass;"
 Write "s[14]=o.enclosingStyle;"
 Write "s[15]=o.error;"
 Write "s[16]=o.height;"
 Write "s[17]=(o.hidden?1:0);"
 Write "s[18]=o.hint;"
 Write "s[19]=o.hintClass;"
 Write "s[20]=o.hintStyle;"
 Write "s[21]=o.label;"
 Write "s[22]=o.labelClass;"
 Write "s[23]=o.labelDisabledClass;"
 Write "s[24]=o.labelStyle;"
 Write "s[25]=o.onafterdrag;"
 Write "s[26]=o.onbeforedrag;"
 Write "s[27]=o.ondrag;"
 Write "s[28]=o.ondrop;"
 Write "s[29]=o.onhide;"
 Write "s[30]=o.onrefresh;"
 Write "s[31]=o.onshow;"
 Write "s[32]=o.onupdate;"
 Write "s[33]=o.overlayMode;"
 Write "s[34]=o.renderFlag;"
 Write "s[35]=(o.showLabel?1:0);"
 Write "s[36]=o.slice;"
 Write "s[37]=o.title;"
 Write "s[38]=o.tuple;"
 Write "s[39]=o.valign;"
 Write "s[40]=(o.visible?1:0);"
 Write "s[41]=o.width;"
 Write !,"}",!
 Quit 1 }
%DrawJSStrings(pVisited) public {
 Set tSC = 1
 If '$D(pVisited("TRU.web.component.DemoTitle")) {
  Set tSC = ##class(%ZEN.Component.component)$this.%DrawJSStrings(.pVisited)
  Set pVisited("TRU.web.component.DemoTitle") = ""
 }
 Quit tSC }
%DrawObjectProperties() public {
 Write:(..align'="") "o.align = '",$ZCVT(..align,"O","JS"),"';",!
 Write:(..aux'="") "o.aux = '",$ZCVT(..aux,"O","JS"),"';",!
 Write:(..category'=$get(^IRIS.Msg("TRUDEMO",$s($mvv(58)="":"en",1:$mvv(58)),"1096414540"),"Zen Demonstration")) "o.category = '",$ZCVT(..category,"O","JS"),"';",!
  If ##class(%ZEN.Component.group).%IsA("%ZEN.Component.object") {
  Write:$IsObject(..composite) "o.composite = _zenIndex[",(+..composite.index),"]",";",!
 }
 Write:(..containerStyle'="") "o.containerStyle = '",$ZCVT(..containerStyle,"O","JS"),"';",!
 Write:(..dragEnabled'=0) "o.dragEnabled = ",$S(+..dragEnabled:"true",1:"false"),";",!
 Write:(..dropEnabled'=0) "o.dropEnabled = ",$S(+..dropEnabled:"true",1:"false"),";",!
 Write:(..dynamic'=0) "o.dynamic = ",$S(+..dynamic:"true",1:"false"),";",!
 Write:(..enclosingClass'=..#DEFAULTENCLOSINGCLASS) "o.enclosingClass = '",$ZCVT(..enclosingClass,"O","JS"),"';",!
 Write:(..enclosingStyle'="") "o.enclosingStyle = '",$ZCVT(..enclosingStyle,"O","JS"),"';",!
 Write:(..error'="") "o.error = '",$ZCVT(..error,"O","JS"),"';",!
 Write:(..height'=..#DEFAULTHEIGHT) "o.height = '",$ZCVT(..height,"O","JS"),"';",!
 Write:(..hidden'=..#DEFAULTHIDDEN) "o.hidden = ",$S(+..hidden:"true",1:"false"),";",!
 Write:(..hint'="") "o.hint = '",$ZCVT(..hint,"O","JS"),"';",!
 Write:(..hintClass'=..#DEFAULTHINTCLASS) "o.hintClass = '",$ZCVT(..hintClass,"O","JS"),"';",!
 Write:(..hintStyle'="") "o.hintStyle = '",$ZCVT(..hintStyle,"O","JS"),"';",!
 Write:(..id'="") "o.id = '",$ZCVT(..id,"O","JS"),"';",!
 Write:(..label'="") "o.label = '",$ZCVT(..label,"O","JS"),"';",!
 Write:(..labelClass'=..#DEFAULTLABELCLASS) "o.labelClass = '",$ZCVT(..labelClass,"O","JS"),"';",!
 Write:(..labelDisabledClass'=..#DEFAULTLABELDISABLEDCLASS) "o.labelDisabledClass = '",$ZCVT(..labelDisabledClass,"O","JS"),"';",!
 Write:(..labelStyle'="") "o.labelStyle = '",$ZCVT(..labelStyle,"O","JS"),"';",!
 Write:(..name'="") "o.name = '",$ZCVT(..name,"O","JS"),"';",!
 Write:(..onafterdrag'="") "o.onafterdrag = '",$ZCVT(..onafterdrag,"O","JS"),"';",!
 Write:(..onbeforedrag'="") "o.onbeforedrag = '",$ZCVT(..onbeforedrag,"O","JS"),"';",!
 Write:(..ondrag'="") "o.ondrag = '",$ZCVT(..ondrag,"O","JS"),"';",!
 Write:(..ondrop'="") "o.ondrop = '",$ZCVT(..ondrop,"O","JS"),"';",!
 Write:(..onhide'="") "o.onhide = '",$ZCVT(..onhide,"O","JS"),"';",!
 Write:(..onrefresh'="") "o.onrefresh = '",$ZCVT(..onrefresh,"O","JS"),"';",!
 Write:(..onshow'="") "o.onshow = '",$ZCVT(..onshow,"O","JS"),"';",!
 Write:(..onupdate'="") "o.onupdate = '",$ZCVT(..onupdate,"O","JS"),"';",!
 Write:(..overlayMode'=0) "o.overlayMode = ",$S($IsValidNum(..overlayMode):..overlayMode,1:"''"),";",!
  If ##class(%ZEN.Component.object).%IsA("%ZEN.Component.object") {
  Write:$IsObject(..parent) "o.parent = _zenIndex[",(+..parent.index),"]",";",!
 }
 Write:(..renderFlag'=0) "o.renderFlag = ",$S($IsValidNum(..renderFlag):..renderFlag,1:"''"),";",!
 Write:(..showLabel'=1) "o.showLabel = ",$S(+..showLabel:"true",1:"false"),";",!
 Write:(..slice'="") "o.slice = ",$S($IsValidNum(..slice):..slice,1:"''"),";",!
 Write:(..title'="") "o.title = '",$ZCVT(..title,"O","JS"),"';",!
 Write:(..tuple'="") "o.tuple = '",$ZCVT(..tuple,"O","JS"),"';",!
 Write:(..valign'="") "o.valign = '",$ZCVT(..valign,"O","JS"),"';",!
 Write:(..visible'=..#DEFAULTVISIBLE) "o.visible = ",$S(+..visible:"true",1:"false"),";",!
 Write:(..width'=..#DEFAULTWIDTH) "o.width = '",$ZCVT(..width,"O","JS"),"';",!
 Write:(..window'="") "o.window = '",$ZCVT(..window,"O","JS"),"';",!
 Do $System.CLS.SetSModified($this,0) }
%DrawStyleHTML(pLevel=2) public {
 Write "<!-- Style: "_($classname())_" -->",! 
 Write "<style type=""text/css"">",!
 Write ".demoTitle {",!
 Write "color: black;",!
 Write "background: #c5d6d6;",!
 Write "background-image: url(images/titlegradient.png);",!
 Write "background-repeat: repeat-y;",!
 Write "background-position: right;",!
 Write "width: 100%;",!
 Write "padding: 0px;",!
 Write "border-bottom: 1px solid darkblue;",!
 Write "font-size: 1.4em;",!
 Write "font-family: verdana;",!
 Write "text-align: center;",!
 Write "}",!
 Write "</style>",! }
%GenerateCode(pCode,pLocalize,pURIList,pCollection,pLevel=1,pMode="page",pKey="",pParentVar="unknown") public {
 Set tVar = "DmTtl"_pLevel
 If ((..%condition '= "")||(..%resource '= "")) {
  Set tCond = $S(..%condition="":"",1:"("_..%condition_")")
  Set tRsc = $S(..%resource="":"",1:"$system.Security.Check("""_..%resource_""",""USE"")")
  Set tAND = $S((tCond="")||(tRsc=""):"",1:"&&")
  Do pCode.WriteLine(" If ("_tRsc_tAND_tCond_") {")
 }
 If (pLevel>1) {
  Do pCode.WriteLine(" Set "_tVar_" = ##class(TRU.web.component.DemoTitle).%New()")
 } Else {
  If (pMode = "composite") {
    Do pCode.WriteLine(" Set "_tVar_" = ##this")
  } ElseIf (pMode = "pane") {
    Do pCode.WriteLine(" Set "_tVar_" = pGroup")
  } Else {
   Do pCode.WriteLine(" Set "_tVar_" = ..%New()")
   Do pCode.WriteLine(" Set %page = "_tVar_"")
   Do pCode.WriteLine(" Do %page.%ApplyURLParms()")
  }
 }
 Do:(..%import'="") pCode.WriteLine(" Set "_tVar_".%import="_..%QuoteValue(..%import))
 Do:(..id'="") pCode.WriteLine(" Set "_tVar_".id="_..%QuoteValue(..id))
 Do:(..name'="") pCode.WriteLine(" Set "_tVar_".name="_..%QuoteValue(..name))
 Do:(..%condition'=("")) pCode.WriteLine(" Set "_tVar_".%condition="_..%QuoteValue(..%condition))
 Do:(..%resource'=("")) pCode.WriteLine(" Set "_tVar_".%resource="_..%QuoteValue(..%resource))
 Do:(..align'=("")) pCode.WriteLine(" Set "_tVar_".align="_..%QuoteValue(..align))
 Do:(..aux'=("")) pCode.WriteLine(" Set "_tVar_".aux="_..%QuoteValue(..aux))
 If (pLocalize) {
 Do:(..category'=($get(^IRIS.Msg("TRUDEMO",$s($mvv(58)="":"en",1:$mvv(58)),"1096414540"),"Zen Demonstration"))) pCode.WriteLine(" Set "_tVar_".category="_..%QuoteValueL10N(..category)_"")
 } Else {
 Do:(..category'=($get(^IRIS.Msg("TRUDEMO",$s($mvv(58)="":"en",1:$mvv(58)),"1096414540"),"Zen Demonstration"))) pCode.WriteLine(" Set "_tVar_".category="_..%QuoteValue(..category))
 }
 Do:($IsObject(..composite)&&(..composite.%IsA("%ZEN.Component.object"))) ..composite.%GenerateCode(pCode,pLocalize,.pURIList,"composite",pLevel+1,pMode,$C(0),tVar)
 Do:(..containerStyle'=("")) pCode.WriteLine(" Set "_tVar_".containerStyle="_..%QuoteValue(..containerStyle))
 Do:(..dragEnabled'=(0)) pCode.WriteLine(" Set "_tVar_".dragEnabled="_..%QuoteValue(..dragEnabled))
 Do:(..dropEnabled'=(0)) pCode.WriteLine(" Set "_tVar_".dropEnabled="_..%QuoteValue(..dropEnabled))
 Do:(..dynamic'=(0)) pCode.WriteLine(" Set "_tVar_".dynamic="_..%QuoteValue(..dynamic))
 Do:(..enclosingClass'=(..#DEFAULTENCLOSINGCLASS)) pCode.WriteLine(" Set "_tVar_".enclosingClass="_..%QuoteValue(..enclosingClass))
 Do:(..enclosingStyle'=("")) pCode.WriteLine(" Set "_tVar_".enclosingStyle="_..%QuoteValue(..enclosingStyle))
 Do:(..error'=("")) pCode.WriteLine(" Set "_tVar_".error="_..%QuoteValue(..error))
 Do:(..height'=(..#DEFAULTHEIGHT)) pCode.WriteLine(" Set "_tVar_".height="_..%QuoteValue(..height))
 Do:(..hidden'=(..#DEFAULTHIDDEN)) pCode.WriteLine(" Set "_tVar_".hidden="_..%QuoteValue(..hidden))
 If (pLocalize) {
 Do:(..hint'=("")) pCode.WriteLine(" Set "_tVar_".hint="_..%QuoteValueL10N(..hint)_"")
 } Else {
 Do:(..hint'=("")) pCode.WriteLine(" Set "_tVar_".hint="_..%QuoteValue(..hint))
 }
 Do:(..hintClass'=(..#DEFAULTHINTCLASS)) pCode.WriteLine(" Set "_tVar_".hintClass="_..%QuoteValue(..hintClass))
 Do:(..hintStyle'=("")) pCode.WriteLine(" Set "_tVar_".hintStyle="_..%QuoteValue(..hintStyle))
 If (pLocalize) {
 Do:(..label'=("")) pCode.WriteLine(" Set "_tVar_".label="_..%QuoteValueL10N(..label)_"")
 } Else {
 Do:(..label'=("")) pCode.WriteLine(" Set "_tVar_".label="_..%QuoteValue(..label))
 }
 Do:(..labelClass'=(..#DEFAULTLABELCLASS)) pCode.WriteLine(" Set "_tVar_".labelClass="_..%QuoteValue(..labelClass))
 Do:(..labelDisabledClass'=(..#DEFAULTLABELDISABLEDCLASS)) pCode.WriteLine(" Set "_tVar_".labelDisabledClass="_..%QuoteValue(..labelDisabledClass))
 Do:(..labelStyle'=("")) pCode.WriteLine(" Set "_tVar_".labelStyle="_..%QuoteValue(..labelStyle))
 Do:(..onafterdrag'=("")) pCode.WriteLine(" Set "_tVar_".onafterdrag="_..%QuoteValue(..onafterdrag))
 Do:(..onbeforedrag'=("")) pCode.WriteLine(" Set "_tVar_".onbeforedrag="_..%QuoteValue(..onbeforedrag))
 Do:(..ondrag'=("")) pCode.WriteLine(" Set "_tVar_".ondrag="_..%QuoteValue(..ondrag))
 Do:(..ondrop'=("")) pCode.WriteLine(" Set "_tVar_".ondrop="_..%QuoteValue(..ondrop))
 Do:(..onhide'=("")) pCode.WriteLine(" Set "_tVar_".onhide="_..%QuoteValue(..onhide))
 Do:(..onrefresh'=("")) pCode.WriteLine(" Set "_tVar_".onrefresh="_..%QuoteValue(..onrefresh))
 Do:(..onshow'=("")) pCode.WriteLine(" Set "_tVar_".onshow="_..%QuoteValue(..onshow))
 Do:(..onupdate'=("")) pCode.WriteLine(" Set "_tVar_".onupdate="_..%QuoteValue(..onupdate))
 Do:(..overlayMode'=(0)) pCode.WriteLine(" Set "_tVar_".overlayMode="_..%QuoteValue(..overlayMode))
 Do:($IsObject(..parent)&&(..parent.%IsA("%ZEN.Component.object"))) ..parent.%GenerateCode(pCode,pLocalize,.pURIList,"parent",pLevel+1,pMode,$C(0),tVar)
 Do:(..renderFlag'=(0)) pCode.WriteLine(" Set "_tVar_".renderFlag="_..%QuoteValue(..renderFlag))
 Do:(..showLabel'=(1)) pCode.WriteLine(" Set "_tVar_".showLabel="_..%QuoteValue(..showLabel))
 Do:(..slice'=("")) pCode.WriteLine(" Set "_tVar_".slice="_..%QuoteValue(..slice))
 If (pLocalize) {
 Do:(..title'=("")) pCode.WriteLine(" Set "_tVar_".title="_..%QuoteValueL10N(..title)_"")
 } Else {
 Do:(..title'=("")) pCode.WriteLine(" Set "_tVar_".title="_..%QuoteValue(..title))
 }
 Do:(..tuple'=("")) pCode.WriteLine(" Set "_tVar_".tuple="_..%QuoteValue(..tuple))
 Do:(..valign'=("")) pCode.WriteLine(" Set "_tVar_".valign="_..%QuoteValue(..valign))
 Do:(..visible'=(..#DEFAULTVISIBLE)) pCode.WriteLine(" Set "_tVar_".visible="_..%QuoteValue(..visible))
 Do:(..width'=(..#DEFAULTWIDTH)) pCode.WriteLine(" Set "_tVar_".width="_..%QuoteValue(..width))
 Do:(..window'=("")) pCode.WriteLine(" Set "_tVar_".window="_..%QuoteValue(..window))
 If (pLevel>1) {
  If ((pCollection="children")) {
  Do pCode.WriteLine(" Do "_pParentVar_".%AddChild("_tVar_")")
  } Else {
   If (pKey="") {
    Do pCode.WriteLine(" Do "_pParentVar_"."_pCollection_".Insert("_tVar_")")
   }
   ElseIf (pKey=$C(0)) {
    Do pCode.WriteLine(" Set "_pParentVar_"."_pCollection_" = "_tVar)
    Do pCode.WriteLine(" Set "_tVar_".parent = "_pParentVar)
   }
   Else {
    Do pCode.WriteLine(" Do "_pParentVar_"."_pCollection_".SetAt("_tVar_","""_pKey_""")")
    Do pCode.WriteLine(" Set "_tVar_".parent = "_pParentVar)
   }
  Do pCode.WriteLine(" Do:$IsObject(%page) %page.%AddComponent("_tVar_")")
  }
 }
 If ((..%condition '= "") || (..%resource '= "")) {
  Do pCode.WriteLine(" }")
 } }
%GetClassCRC() public {
 Quit 854869362 }
%GetIncludeFiles(pMode="HTML") public {
 If $D(%zenClassList("TRU.web.component.DemoTitle")) Quit
 Set %zenClassList("TRU.web.component.DemoTitle") = ""
 Do ##class(%ZEN.Component.component)$this.%GetIncludeFiles(pMode)
 Set:(pMode="HTML") %zenIncludeJS(2,1,"TRU.web.component","TRU_web_component.js") = $LB("js",2,"TRU.web.component.DemoTitle")
 Set:(pMode="HTML") %zenIncludeCSS(2,1,"TRU.web.component","TRU_web_component.cssx") = $LB("html",2) }
%GetIncludeInfo(pModules,pHasJS,pCSSType,pInline) public {
 Set pModules("TRU.web.component","TRU_web_component") = $LB(2,"")
 Set pHasJS = 1
 Set pCSSType = "HTML"
 Set pInline = 0 }
%GetSuperClassList(pList) public {
 Quit "%ZEN.Component.object,%ZEN.Component.component,TRU.web.component.DemoTitle" }
%GetXMLName(pNamespace,pName) public {
 Set pNamespace = "http://www.intersystems.com/zen"
 Set pName = "DemoTitle" }
%ObjectSynch() public {
 Set tSC = 1
 Set $ZT="Trap"
 Set osp =  "o.setProperty"
 Set s%"%%OID"=0
 Set s%%condition=0
 Set s%%import=0
 Set s%%includeFiles=0
 Set s%%page=0
 Set s%%resource=0
 Quit:'$system.CLS.GetSModified($this) tSC
 Write:s%align osp,"('align','",$ZCVT(..align,"O","JS"),"');",!
 Write:s%aux osp,"('aux','",$ZCVT(..aux,"O","JS"),"');",!
 Write:s%category osp,"('category','",$ZCVT(..category,"O","JS"),"');",!
 If s%composite {
 If ##class(%ZEN.Component.group).%IsA("%ZEN.Component.object") {
  Write "o.composite = ",$S($IsObject(..composite):"_zenIndex["_(+..composite.index)_"]",1:"null"),";",!
 }
 }
 Write:s%containerStyle osp,"('containerStyle','",$ZCVT(..containerStyle,"O","JS"),"');",!
 Write:s%dragEnabled osp,"('dragEnabled',",$S(+..dragEnabled:"true",1:"false"),");",!
 Write:s%dropEnabled osp,"('dropEnabled',",$S(+..dropEnabled:"true",1:"false"),");",!
 Write:s%dynamic "o.dynamic = ",$S(+..dynamic:"true",1:"false"),";",!
 Write:s%enclosingClass osp,"('enclosingClass','",$ZCVT(..enclosingClass,"O","JS"),"');",!
 Write:s%enclosingStyle osp,"('enclosingStyle','",$ZCVT(..enclosingStyle,"O","JS"),"');",!
 Write:s%error "o.error = '",$ZCVT(..error,"O","JS"),"';",!
 Write:s%height osp,"('height','",$ZCVT(..height,"O","JS"),"');",!
 Write:s%hidden osp,"('hidden',",$S(+..hidden:"true",1:"false"),");",!
 Write:s%hint osp,"('hint','",$ZCVT(..hint,"O","JS"),"');",!
 Write:s%hintClass osp,"('hintClass','",$ZCVT(..hintClass,"O","JS"),"');",!
 Write:s%hintStyle osp,"('hintStyle','",$ZCVT(..hintStyle,"O","JS"),"');",!
 Write:s%id osp,"('id','",$ZCVT(..id,"O","JS"),"');",!
 Write:s%label osp,"('label','",$ZCVT(..label,"O","JS"),"');",!
 Write:s%labelClass osp,"('labelClass','",$ZCVT(..labelClass,"O","JS"),"');",!
 Write:s%labelDisabledClass osp,"('labelDisabledClass','",$ZCVT(..labelDisabledClass,"O","JS"),"');",!
 Write:s%labelStyle osp,"('labelStyle','",$ZCVT(..labelStyle,"O","JS"),"');",!
 Write:s%name osp,"('name','",$ZCVT(..name,"O","JS"),"');",!
 Write:s%onafterdrag osp,"('onafterdrag','",$ZCVT(..onafterdrag,"O","JS"),"');",!
 Write:s%onbeforedrag osp,"('onbeforedrag','",$ZCVT(..onbeforedrag,"O","JS"),"');",!
 Write:s%ondrag osp,"('ondrag','",$ZCVT(..ondrag,"O","JS"),"');",!
 Write:s%ondrop osp,"('ondrop','",$ZCVT(..ondrop,"O","JS"),"');",!
 Write:s%onhide osp,"('onhide','",$ZCVT(..onhide,"O","JS"),"');",!
 Write:s%onrefresh osp,"('onrefresh','",$ZCVT(..onrefresh,"O","JS"),"');",!
 Write:s%onshow osp,"('onshow','",$ZCVT(..onshow,"O","JS"),"');",!
 Write:s%onupdate osp,"('onupdate','",$ZCVT(..onupdate,"O","JS"),"');",!
 Write:s%overlayMode "o.overlayMode = ",$S($IsValidNum(..overlayMode):..overlayMode,1:"''"),";",!
 If s%parent {
 If ##class(%ZEN.Component.object).%IsA("%ZEN.Component.object") {
  Write "o.parent = ",$S($IsObject(..parent):"_zenIndex["_(+..parent.index)_"]",1:"null"),";",!
 }
 }
 Write:s%renderFlag "o.renderFlag = ",$S($IsValidNum(..renderFlag):..renderFlag,1:"''"),";",!,"zenRenderContents(o);",!
 Write:s%showLabel osp,"('showLabel',",$S(+..showLabel:"true",1:"false"),");",!
 Write:s%slice osp,"('slice',",$S($IsValidNum(..slice):..slice,1:"''"),");",!
 Write:s%title osp,"('title','",$ZCVT(..title,"O","JS"),"');",!
 Write:s%tuple "o.tuple = '",$ZCVT(..tuple,"O","JS"),"';",!
 Write:s%valign osp,"('valign','",$ZCVT(..valign,"O","JS"),"');",!
 Write:s%visible "o.visible = ",$S(+..visible:"true",1:"false"),";",!
 Write:s%width osp,"('width','",$ZCVT(..width,"O","JS"),"');",!
 Do $System.CLS.SetSModified($this,0)
 Quit tSC
Trap
 Set $ZT=""
 Set tSC = $$Error^%apiOBJ(5002,"TRU.web.component.DemoTitle:ObjectSynch: "_$ZE)
 Quit tSC }
%ZENDeserialize(pState,pObjSet) public {
 Set tSC=1
 If (..%GetClassCRC()'=$P(pState,$C(1),1)) { Quit $$Error^%apiOBJ(5001,"Server version of object does not match version sent from the client: "_..%ClassName(1)) } 
 Set ..index=$P(pState,$C(1),2)
 Set ..id=$P(pState,$C(1),3)
 Set ..name=$P(pState,$C(1),4)
 Set parent=$S($P(pState,$C(1),5)="":"",1:$G(pObjSet($P(pState,$C(1),5)))) Do:$IsObject(parent) parent.%AddChild($this)
 Set ..composite=$S($P(pState,$C(1),6)="":"",1:$G(pObjSet($P(pState,$C(1),6))))
 Set ..align=$P(pState,$C(1),7)
 Set ..aux=$P(pState,$C(1),8)
 Set ..category=$P(pState,$C(1),9)
 Set ..containerStyle=$P(pState,$C(1),10)
 Set ..dragEnabled=''$P(pState,$C(1),11)
 Set ..dropEnabled=''$P(pState,$C(1),12)
 Set ..dynamic=''$P(pState,$C(1),13)
 Set ..enclosingClass=$P(pState,$C(1),14)
 Set ..enclosingStyle=$P(pState,$C(1),15)
 Set ..error=$P(pState,$C(1),16)
 Set ..height=$P(pState,$C(1),17)
 Set ..hidden=''$P(pState,$C(1),18)
 Set ..hint=$P(pState,$C(1),19)
 Set ..hintClass=$P(pState,$C(1),20)
 Set ..hintStyle=$P(pState,$C(1),21)
 Set ..label=$P(pState,$C(1),22)
 Set ..labelClass=$P(pState,$C(1),23)
 Set ..labelDisabledClass=$P(pState,$C(1),24)
 Set ..labelStyle=$P(pState,$C(1),25)
 Set ..onafterdrag=$P(pState,$C(1),26)
 Set ..onbeforedrag=$P(pState,$C(1),27)
 Set ..ondrag=$P(pState,$C(1),28)
 Set ..ondrop=$P(pState,$C(1),29)
 Set ..onhide=$P(pState,$C(1),30)
 Set ..onrefresh=$P(pState,$C(1),31)
 Set ..onshow=$P(pState,$C(1),32)
 Set ..onupdate=$P(pState,$C(1),33)
 Set ..overlayMode=$P(pState,$C(1),34)
 Set ..renderFlag=$P(pState,$C(1),35)
 Set ..showLabel=''$P(pState,$C(1),36)
 Set ..slice=$P(pState,$C(1),37)
 Set ..title=$P(pState,$C(1),38)
 Set ..tuple=$P(pState,$C(1),39)
 Set ..valign=$P(pState,$C(1),40)
 Set ..visible=''$P(pState,$C(1),41)
 Set ..width=$P(pState,$C(1),42)
 Do $System.CLS.SetSModified($this,0)
 Quit tSC }
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 If encoded Quit $$Error^%apiOBJ(6231,fmt)
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"TRU.web.component.DemoTitle")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If 'nocycle {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"TRU.web.component.DemoTitle")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="TRU.web.component.DemoTitle"))
 If $IsObject(namespaces) {
   If namespaces.Stable,namespaces.CurrentNamespace="http://www.intersystems.com/zen",'tmpi||(typesPrefix'="") {
     Set topAttrs=""
   } Else {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("http://www.intersystems.com/zen",$get(local,0),tmpi,"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   }
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="DemoTitle"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"DemoTitle"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"DemoTitle"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..%condition
 Set %xmlmsg=" "_attrsPrefix_"condition="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..%resource
 Set %xmlmsg=" "_attrsPrefix_"resource="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..%import
 Set %xmlmsg=" "_attrsPrefix_"import="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..id
 Set %xmlmsg=" "_attrsPrefix_"id="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..name
 Set %xmlmsg=" "_attrsPrefix_"name="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..aux
 Set %xmlmsg=" "_attrsPrefix_"aux="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..onupdate
 Set %xmlmsg=" "_attrsPrefix_"onupdate="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..label
 Set %xmlmsg=" "_attrsPrefix_"label="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..labelClass
 Set %xmlmsg=" "_attrsPrefix_"labelClass="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..labelDisabledClass
 Set %xmlmsg=" "_attrsPrefix_"labelDisabledClass="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..labelStyle
 Set %xmlmsg=" "_attrsPrefix_"labelStyle="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..showLabel
 Set %xmlmsg=" "_attrsPrefix_"showLabel="""_$select(val=$c(0):"",1:$select(val:"true",1:"false"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..hint
 Set %xmlmsg=" "_attrsPrefix_"hint="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..hintClass
 Set %xmlmsg=" "_attrsPrefix_"hintClass="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..hintStyle
 Set %xmlmsg=" "_attrsPrefix_"hintStyle="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..hidden
 Set %xmlmsg=" "_attrsPrefix_"hidden="""_$select(val=$c(0):"",1:$select(val:"true",1:"false"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..onshow
 Set %xmlmsg=" "_attrsPrefix_"onshow="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..onhide
 Set %xmlmsg=" "_attrsPrefix_"onhide="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..onrefresh
 Set %xmlmsg=" "_attrsPrefix_"onrefresh="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..dragEnabled
 Set %xmlmsg=" "_attrsPrefix_"dragEnabled="""_$select(val=$c(0):"",1:$select(val:"true",1:"false"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..dropEnabled
 Set %xmlmsg=" "_attrsPrefix_"dropEnabled="""_$select(val=$c(0):"",1:$select(val:"true",1:"false"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..onbeforedrag
 Set %xmlmsg=" "_attrsPrefix_"onbeforedrag="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..ondrag
 Set %xmlmsg=" "_attrsPrefix_"ondrag="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..onafterdrag
 Set %xmlmsg=" "_attrsPrefix_"onafterdrag="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..ondrop
 Set %xmlmsg=" "_attrsPrefix_"ondrop="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..containerStyle
 Set %xmlmsg=" "_attrsPrefix_"containerStyle="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..align
 Set %xmlmsg=" "_attrsPrefix_"align="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..valign
 Set %xmlmsg=" "_attrsPrefix_"valign="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..width
 Set %xmlmsg=" "_attrsPrefix_"width="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..height
 Set %xmlmsg=" "_attrsPrefix_"height="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..slice
 Set %xmlmsg=" "_attrsPrefix_"slice="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..enclosingClass
 Set %xmlmsg=" "_attrsPrefix_"enclosingClass="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..enclosingStyle
 Set %xmlmsg=" "_attrsPrefix_"enclosingStyle="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..title
 Set %xmlmsg=" "_attrsPrefix_"title="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..category
 Set %xmlmsg=" "_attrsPrefix_"category="""_$select(val=$c(0):"",1:$zcvt(val,"O","XML"))_"""" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
   If 'nocycle Kill oreflist($this)
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("TRU.web.component.DemoTitle",.imports,.classes)
zXMLImportAttributes()
 ;
 New data,ref,attr,attrlist,xmlns
 Do XMLImportAttrnode()
 Set xmlns=$get(@(tree)@("N","http://www.w3.org/2000/xmlns/")),attr="" For { Set attr=$order(attributeList(attr)) Quit:attr=""  Kill:((attr="xmlns")&&($zwascii(attributeList(attr),9)=0))||$case($zwascii(attributeList(attr),9),xmlns:1,1:1,:0) attributeList(attr) }
 If keynameattr'="" Kill attributeList(keynameattr)
 If ($data(attributeList("condition"))) {
   Set ref="condition",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..%condition=data
   Kill attributeList("condition")
 }
 If ($data(attributeList("resource"))) {
   Set ref="resource",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>250):1,1:$$Error^%apiOBJ(7201,data,250))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..%resource=data
   Kill attributeList("resource")
 }
 If ($data(attributeList("import"))) {
   Set ref="import",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>1000):1,1:$$Error^%apiOBJ(7201,data,1000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..%import=data
   Kill attributeList("import")
 }
 If ($data(attributeList("id"))) {
   Set ref="id",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..id=data
   Kill attributeList("id")
 }
 If ($data(attributeList("name"))) {
   Set ref="name",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..name=data
   Kill attributeList("name")
 }
 If ($data(attributeList("aux"))) {
   Set ref="aux",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>32000):1,1:$$Error^%apiOBJ(7201,data,32000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..aux=data
   Kill attributeList("aux")
 }
 If ($data(attributeList("onupdate"))) {
   Set ref="onupdate",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..onupdate=data
   Kill attributeList("onupdate")
 }
 If ($data(attributeList("label"))) {
   Set ref="label",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>1000):1,1:$$Error^%apiOBJ(7201,data,1000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..label=data
   Kill attributeList("label")
 }
 If ($data(attributeList("labelClass"))) {
   Set ref="labelClass",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..labelClass=data
   Kill attributeList("labelClass")
 }
 If ($data(attributeList("labelDisabledClass"))) {
   Set ref="labelDisabledClass",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..labelDisabledClass=data
   Kill attributeList("labelDisabledClass")
 }
 If ($data(attributeList("labelStyle"))) {
   Set ref="labelStyle",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>32000):1,1:$$Error^%apiOBJ(7201,data,32000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..labelStyle=data
   Kill attributeList("labelStyle")
 }
 If ($data(attributeList("showLabel"))) {
   Set ref="showLabel",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Set data=$case(data,"true":1,"false":0,1:1,0:0,:"") Goto:data="" XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..showLabel=data
   Kill attributeList("showLabel")
 }
 If ($data(attributeList("hint"))) {
   Set ref="hint",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>1000):1,1:$$Error^%apiOBJ(7201,data,1000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..hint=data
   Kill attributeList("hint")
 }
 If ($data(attributeList("hintClass"))) {
   Set ref="hintClass",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..hintClass=data
   Kill attributeList("hintClass")
 }
 If ($data(attributeList("hintStyle"))) {
   Set ref="hintStyle",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>32000):1,1:$$Error^%apiOBJ(7201,data,32000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..hintStyle=data
   Kill attributeList("hintStyle")
 }
 If ($data(attributeList("hidden"))) {
   Set ref="hidden",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Set data=$S(data["#(":data,1:$case(data,"true":1,"false":0,1:1,0:0,:"")) Goto:data="" XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..hidden=data
   Kill attributeList("hidden")
 }
 If ($data(attributeList("onshow"))) {
   Set ref="onshow",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..onshow=data
   Kill attributeList("onshow")
 }
 If ($data(attributeList("onhide"))) {
   Set ref="onhide",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..onhide=data
   Kill attributeList("onhide")
 }
 If ($data(attributeList("onrefresh"))) {
   Set ref="onrefresh",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..onrefresh=data
   Kill attributeList("onrefresh")
 }
 If ($data(attributeList("dragEnabled"))) {
   Set ref="dragEnabled",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Set data=$case(data,"true":1,"false":0,1:1,0:0,:"") Goto:data="" XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..dragEnabled=data
   Kill attributeList("dragEnabled")
 }
 If ($data(attributeList("dropEnabled"))) {
   Set ref="dropEnabled",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Set data=$case(data,"true":1,"false":0,1:1,0:0,:"") Goto:data="" XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..dropEnabled=data
   Kill attributeList("dropEnabled")
 }
 If ($data(attributeList("onbeforedrag"))) {
   Set ref="onbeforedrag",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..onbeforedrag=data
   Kill attributeList("onbeforedrag")
 }
 If ($data(attributeList("ondrag"))) {
   Set ref="ondrag",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..ondrag=data
   Kill attributeList("ondrag")
 }
 If ($data(attributeList("onafterdrag"))) {
   Set ref="onafterdrag",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..onafterdrag=data
   Kill attributeList("onafterdrag")
 }
 If ($data(attributeList("ondrop"))) {
   Set ref="ondrop",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>2000):1,1:$$Error^%apiOBJ(7201,data,2000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..ondrop=data
   Kill attributeList("ondrop")
 }
 If ($data(attributeList("containerStyle"))) {
   Set ref="containerStyle",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>32000):1,1:$$Error^%apiOBJ(7201,data,32000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..containerStyle=data
   Kill attributeList("containerStyle")
 }
 If ($data(attributeList("align"))) {
   Set ref="align",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(data'[","&&(",left,right,center,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",left,right,center"))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..align=data
   Kill attributeList("align")
 }
 If ($data(attributeList("valign"))) {
   Set ref="valign",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(data'[","&&(",top,bottom,middle,"[(","_$select(data=$c(0):"",1:data)_",")):1,1:$$Error^%apiOBJ(7205,data,",top,bottom,middle"))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..valign=data
   Kill attributeList("valign")
 }
 If ($data(attributeList("width"))) {
   Set ref="width",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..width=data
   Kill attributeList("width")
 }
 If ($data(attributeList("height"))) {
   Set ref="height",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..height=data
   Kill attributeList("height")
 }
 If ($data(attributeList("slice"))) {
   Set ref="slice",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Set numAttrs=numAttrs+1
   Set ..slice=data
   Kill attributeList("slice")
 }
 If ($data(attributeList("enclosingClass"))) {
   Set ref="enclosingClass",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..enclosingClass=data
   Kill attributeList("enclosingClass")
 }
 If ($data(attributeList("enclosingStyle"))) {
   Set ref="enclosingStyle",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>32000):1,1:$$Error^%apiOBJ(7201,data,32000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..enclosingStyle=data
   Kill attributeList("enclosingStyle")
 }
 If ($data(attributeList("title"))) {
   Set ref="title",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>1000):1,1:$$Error^%apiOBJ(7201,data,1000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..title=data
   Kill attributeList("title")
 }
 If ($data(attributeList("category"))) {
   Set ref="category",data=$case($data(@(tree)@("d",$zlascii(attributeList(ref),13))),1:@(tree)@("d",$zlascii(attributeList(ref),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList(ref)))
   If data'="" Goto:('$s(($l(data)'>1000):1,1:$$Error^%apiOBJ(7201,data,1000))) XMLImportAttrErr
   If data'="" Set numAttrs=numAttrs+1
   Set ..category=data
   Kill attributeList("category")
 }
 If $data(attributeList)>1 {
   Set attrlist="",attr=$order(attributeList(""))
   While attr'="" {
     Set attrlist=attrlist_attr_","
     Set attr=$order(attributeList(attr))
   }
   Set $extract(attrlist,$length(attrlist))=""
   Quit $$Error^%apiOBJ(6353,@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist),attrlist)
 }
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 If $case($piece(fmt,",",1),"":0,"literal":0,:1) Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$get(@(tree)@("N","http://www.intersystems.com/zen"))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"TRU.web.component.DemoTitle")
 Set sc=..XMLImportAttributes() If 'sc Quit sc
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLNew(document,node,containerOref="")
	Quit (##class(TRU.web.component.DemoTitle).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("TRU.web.component.DemoTitle",top,format,namespacePrefix,input,refOnly,.schema)